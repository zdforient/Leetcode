class Solution {
public:
	bool isPalindrome(ListNode* head) {
		stack<int> s;
		ListNode *a = head, *b = head;
		while (b != NULL && b->next != NULL) {
			a = a->next;
			b = b->next->next;
		}
		while (a != NULL) {
			s.push(a->val);
			a = a->next;
		}
		a = head;
		while (!s.empty()) {
			if (s.top() != a->val)
				return false;
			s.pop();
			a = a->next;
		}
		return true;
	}
};


revise:
class Solution {
public:
	bool isPalindrome(ListNode* head) {
        if(head == NULL)
            return true;
		ListNode *a = head, *b = head, *c = NULL, *temp;
		while (b != NULL && b->next != NULL) {
			a = a->next;
			b = b->next->next;
		}
        bool even = (b == NULL);
        b = head;
        while(b != a){
            temp = b->next;
            b->next = c;
            c = b;
            b = temp;
        }
        if (!even)
            b = b->next;
        while(b != NULL){
            if(b->val != c->val)
                return false;
            b = b->next;
            c = c->next;
        }
		return true;
	}
};
