class Solution {
public:
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> output;
        int i = 0;
        vector<int> p(k,0);
        while(i != -1){
            if(++(p[i]) > n) i--;
            else if(i == k - 1) output.push_back(p);
            else p[i] = p[++i - 1];
            
        }
        return output;
    }
};

class Solution {
public:
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> ans;
        vector<int> cur;
        dfs(n, 1, k, ans, cur);
        return ans;
    }
    void dfs(int n, int pos, int k, vector<vector<int>> &ans, vector<int>& cur) {
        if (k == 0) {
            ans.push_back(cur);
            return;
        }
        if (n - pos + 1 < k) return;
        dfs(n, pos+1, k, ans, cur);
        cur.push_back(pos);
        dfs(n, pos+1, k-1, ans, cur);
        cur.pop_back();
    }
};
