class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        map<long long, vector<vector<int>>> m;
        int cnt = 0;
        if(K >= points.size())
            return points;
        for(auto p:points){
            long long dis = p[0]*p[0] + p[1]*p[1];
            if(cnt < K){
                m[dis].push_back(p);
                cnt++;
            }
            else{
                int a = m.rbegin()->first;
                if(dis < a){
                    m.rbegin()->second.pop_back();
                    if(m.rbegin()->second.empty())
                        m.erase(a);
                    m[dis].push_back(p);
                }
            }
        }
        vector<vector<int>> output;
        for(auto v:m){
            for(auto p:v.second)
                output.push_back(p);
        }
        return output;
    }
};


class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& p, int K) {
        int n=p.size();
        pair<long long, pair<long long, long long>>par[n];
        for(int i=0; i<n; i++)
        {
            long long x=p[i][0], y=p[i][1];
            par[i]=make_pair(x*x+y*y, make_pair(x, y));
        }
        sort(par, par+n);
        vector<vector<int>> ans(K);
        for(int i=0; i<K; i++)
        {
            ans[i].resize(2);
            ans[i]={par[i].second.first, par[i].second.second};
        }
        return ans;
    }
};
