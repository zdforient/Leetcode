class Solution {
public:
    bool isPrime(int n){
        int a;
        for(int i = 3; i * i <= n; i += 2)
            if(n%i == 0)
                return false;
        return true;     
    }
    
    int countPrimes(int n) {
        if(n < 4)
            return int((n-1) / 2);
        int output = 1;
        for(int i = 3; i < n; i +=2)
            output += isPrime(i);
        return output;      
    }
};


class Solution {
public:
    int countPrimes(int n) {
        vector<bool> prime(n, true);
        prime[0] = false, prime[1] = false;
        for (int i = 0; i < sqrt(n); ++i) {
            if (prime[i]) {
                for (int j = i*i; j < n; j += i) {
                    prime[j] = false;
                }    
            }    
        }
        return count(prime.begin(), prime.end(), true);
    }
};


class Solution {
public:
    int countPrimes(int n) {
    bool* isPrime = new bool[n];
    for (int i = 2; i < n; i++) {
        isPrime[i] = true;
    }
    for (int i = 2; i * i < n; i++) {
        if (!isPrime[i]) continue;
        for (int j = i * i; j < n; j += i) {
            isPrime[j] = false;
        }
    }
    int count = 0;
    for (int i = 2; i < n; i++) {
        if (isPrime[i]) count++;
    }
    return count;
    }
};


class Solution {
public:
    int countPrimes(int n) {
        if(n < 3) return 0;
        int m = (n + 1)/2, count = m, k, u = (sqrt(n) - 1)/2;
        bool notPrime[m] = {0};
        for(int i = 1; i <= u;i++)
            if(!notPrime[i])
              for(k = (i+ 1)*2*i; k < m;k += i*2 + 1)
                  if (!notPrime[k])
                  {
                      notPrime[k] = true;
                      count--;
                  }
        return count;
    }
};
