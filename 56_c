class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.empty())
            return {};
        
        map<int, int> mp;
        
        for(auto &v : intervals) {
            mp[v[0]]++;
            mp[v[1]]--;
        }
        
        int prev = INT_MIN;
        int sum = 0;
        vector<vector<int>> res;
        for(auto &p : mp) {
            if(prev == INT_MIN) {
                prev = p.first;
            }
            sum += p.second;
            if(sum == 0) {
                res.push_back({prev, p.first});
                prev = INT_MIN;
            }
        }
        
        return res;
    }
};
In this solution, the author uses map to automatically order the numbers in the vector.

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.empty()) return vector<vector<int>>{};
        vector<vector<int>> output;
        sort(intervals.begin(), intervals.end(), [](vector<int> a, vector<int> b){return a[0] < b[0];});
        output.push_back(intervals[0]);
        for(int i = 1; i < intervals.size(); i ++){
            if(output.back()[1] < intervals[i][0]) 
                output.push_back(intervals[i]);
            else 
                output.back()[1] = max(output.back()[1], intervals[i][1]);
        }
        return output;
    }
};
