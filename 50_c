class Solution {
public:
    double myPow(double x, int n) {
        if(!n)
            return 1;        
        if(x == 0 && n > 0)
            return 0;
        else if(x == 0)
            return HUGE_VAL;
        if(x == 1)
            return 1;
        else if (x == -1)
            return n % 2 == 0 ? 1:-1;
        vector<double> nums{x};
        long long int num = 1;
        double output = x;
        long long int pn = n;
        if(n < 0)
            pn = -pn;
        long long int i = 0;
        while(num * 2 <= pn){
            num *= 2;
            output *= output;
            nums.push_back(output);
            i++;
        }
        pn -= num;
        while(pn){
            while(pn < num){
                i--;
                num /= 2;
            }
            output *= nums[i];
            pn -= num;
        }
        if(n < 0)
            output = 1 / output;
        return output;
    }
};

class Solution {
public:
    double myPow(double x, int n) {
        long long times = n;
        if(times < 0){
            x = 1 / x;
            times = -times;
        }
        
        double result = 1;
        double current_product = x;
        for(long long i = times; i > 0; i /= 2){
            if ((i % 2) == 1) {
                result = result * current_product;
            }
            
            current_product = current_product * current_product;
        }
        return result;
    }
};


class Solution {
public:
    double myPow(double x, int n) {
        double output = 1;
        long long newn = n;
        if(n < 0){
            x = 1 / x;
            newn = -newn;
        }
        while(newn){
            if(newn & 1)
                output *= x;
            x *= x;
            newn >>= 1;
        }
        return output;
    }
};
