class Solution {
public:
int threeSumClosest(vector<int>& nums, int target) {
    int diff = INT_MAX;
    int result = 0;
    sort(nums.begin(), nums.end());
    for (int k = 0; k < nums.size(); k++) {
        int i = k + 1;
        int j = nums.size() - 1;
        while (i < j) {
            int threeSum = nums[i] + nums[j] + nums[k];
            int cur_diff = threeSum - target;
            if (abs(cur_diff) < diff) {
                diff = abs(cur_diff);
                result = threeSum;
            } else if (abs(cur_diff) == 0) {
                return threeSum;
            }
            if (cur_diff >= 0) {
                j--;
            } else {
                i++;
            }
        }
    }

    return result;
}
};


class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int j,k,a, sum, output;
        sum = nums[0]+nums[1]+nums[2];
        output = sum;
        int dif = abs(target - output);
        for(int i = 0; i < nums.size(); i ++){
            a = nums[i];
            j = i + 1;
            k = nums.size() - 1;
            while(j < k){
                sum = nums[j] + nums[k] + a;
                if(abs(sum - target) < dif){
                    output = sum;
                    dif = abs(sum - target);
                }
                if(dif == 0)
                    return output;
                if(sum < target)
                    j++;
                else
                    k--;
            }
        }
        return output;
    }
};
