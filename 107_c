/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> vi;
    int l = 1;
    void levelt(TreeNode* root){
        vector<int> s;        
        if(root != NULL){
            if(vi.size() < l){
                vi.push_back(s);
            }
            vi[l-1].push_back(root->val);
            l++;
            levelt(root->left);
            levelt(root->right);
            l--;
        }
        
    }
    
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> vr;
        levelt(root);
        vr = vi;
        std::reverse(vr.begin(),vr.end());
        return vr;
    }
};


vector<vector<int>> levelOrderBottom(TreeNode* root)
{
	vector<vector<int>> out;

	if (!root) return out;

	queue<std::pair<TreeNode*, int>> q;
	q.push({root, 0});

	while (!q.empty())
	{
		TreeNode* n = q.front().first;
		int depth = q.front().second;
		q.pop();

		if (out.size() < depth + 1)
			out.emplace_back(vector<int>());

		out[depth].emplace_back(n->val);

		if (n->left) q.push({n->left, depth + 1});

		if (n->right) q.push({n->right, depth + 1});
	}

	std::reverse(out.begin(), out.end());
	return out;
}
