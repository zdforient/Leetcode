class Solution {
public:
    int dvd(long long int a, long long int b, long long int &res){
        long long sum = 0;
        for(int i = 0; i < 10; i ++){
            sum += b;
            if(sum > a){
                res = a + (b - sum);
                return i;
            }
        }
        return 0;
    }
    
    int divide(int dividend, int divisor) {
        int output = 0;
        int sig = 1;
        if(dividend == -2147483648 && divisor == -1)
            return 2147483647;
        if(dividend == -2147483648 && divisor == 1)
            return dividend;
        string a_s = to_string(dividend);
        string b_s = to_string(divisor);
        if (b_s[0] == '-'){
            sig = 0 - sig;
            b_s = b_s.substr(1);
        }
        if (a_s[0] == '-'){
            sig = 0 - sig;
            a_s = a_s.substr(1);
        }
        int l_a = a_s.length(), l_b = b_s.length();
        long long m,n,r = 0,v;
        if(l_a < l_b)
            return 0;
        if(l_a == l_b)
            if(sig > 0)
                return dvd(stoll(a_s), stoll(b_s),r);
            else
                return 0 - dvd(stoll(a_s), stoll(b_s),r);
        string a_sub;
        
        string s_o = "",res = a_s.substr(0,l_b - 1);
        char v_c;     
        for(int i = l_b - 1; i <= l_a - 1; i ++){
            a_sub = res + a_s.substr(i,1);
            m = stoll(a_sub);
            n = stoll(b_s);
            v = dvd(m,n,r);
            res = to_string(r);
            v_c = v + '0';
            s_o.insert(s_o.end(),1,v_c);
        }
        output = stoll(s_o);
        if(sig > 0)
            return output;
        else
            return 0 - output;
    }
};



class Solution {
public:
    int divide(int dividend, int divisor) {
        if (dividend == INT_MIN && divisor == -1) {
            return INT_MAX;
        }
        long dvd = labs(dividend), dvs = labs(divisor), ans = 0;
        int sign = dividend > 0 ^ divisor > 0 ? -1 : 1;
        while (dvd >= dvs) {
            long temp = dvs, m = 1;
            while (temp << 1 <= dvd) {
                temp <<= 1;
                m <<= 1;
            }
            dvd -= temp;
            ans += m;
        }
        return sign * ans;
    }
};
